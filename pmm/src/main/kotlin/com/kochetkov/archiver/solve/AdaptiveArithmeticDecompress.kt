package com.kochetkov.archiver.solve

import java.io.*

/**
 * Decompression application using adaptive arithmetic coding.
 *
 * Usage: java AdaptiveArithmeticDecompress InputFile OutputFile
 *
 * This decompresses files generated by the "AdaptiveArithmeticCompress" application.
 */
object AdaptiveArithmeticDecompress {
    @Throws(IOException::class)
    @JvmStatic
    fun main(args: Array<String>) {
        // Handle command line arguments
//        if (args.size != 2) {
//            System.err.println("Usage: java AdaptiveArithmeticDecompress InputFile OutputFile")
//            System.exit(1)
//            return
//        }
//        val inputFile = File(args[0])
//        val outputFile = File(args[1])
//        BitInputStream(BufferedInputStream(FileInputStream(inputFile))).use { input ->
//            BufferedOutputStream(FileOutputStream(outputFile)).use { out ->
//                decompress(input, out)
//            }
//        }
    }

    // To allow unit testing, this method is package-private instead of private.
    @Throws(IOException::class)
    fun decompress(`in`: BitInputStream?, out: OutputStream) {
        val initFreqs = FlatFrequencyTable(257)
        val freqs: FrequencyTable = SimpleFrequencyTable(initFreqs)
        val dec = ArithmeticDecoder(32, `in`!!)
        while (true) {
            // Decode and write one byte
            val symbol: Int = dec.read(freqs)
            if (symbol == 256) // EOF symbol
                break
            out.write(symbol)
            freqs.increment(symbol)
        }
    }
}